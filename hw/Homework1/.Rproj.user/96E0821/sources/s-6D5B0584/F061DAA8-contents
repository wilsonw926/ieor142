# 
# Make sure your working directory was set as "Source file location".
# Make sure your data files are in the same folder as this R script.
#
install.packages(c("dplyr", "ggplot2", "GGally"))
library(dplyr)
library(ggplot2)
library(GGally)
install.packages("car")
library(car) # for VIF

# Load data:
elantra <- read.csv("Elantra142-Fall2018.csv") 

str(elantra)
head(elantra)

# Plot scatter matrix
ggscatmat(elantra, columns = 0:8, alpha = 0.8)


# split into training and test sets 

elantra.train <- filter(elantra, Year <= 2015) 
head(elantra.train)
tail(elantra.train)
elantra.test <- filter(elantra, Year <= 2018 & Year >= 2016)

# train the model
#lm(y~x1+x2+...,data)
help(lm)
mod1 <- lm(ElantraSales ~ ElantraQueries + CPI.All, data = elantra.train)
summary(mod1)

# A better model...
# Remove FrancePop
mod2 <- lm(ElantraSales ~ MonthFactor + ElantraQueries + CPI.All + CPI.Energy + Unemployment, data = elantra.train)
summary(mod2)
vif(mod2)

# compute OSR^2

elantraPredictions <- predict(mod3, newdata=elantra.test)
# this builds a vector of predicted values on the test set
SSE = sum((elantra.test$LogAuctionIndex - elantraPredictions)^2)
SST = sum((elantra.test$LogAuctionIndex - mean(elantra.train$LogAuctionIndex))^2)
OSR2 = 1 - SSE/SST

# Confidence interval plot
ggcoef(
  mod1,
  vline_color = "red",
  vline_linetype =  "solid",
  errorbar_color = "blue",
  errorbar_height = .25,
  exclude_intercept = TRUE
)

vif(mod1)

# Remove USAlcConsump
mod3 <- lm(LogAuctionIndex ~ WinterRain + HarvestRain + GrowTemp + HarvestTemp + Age, 
           data = elantra.train)
summary(mod3)
vif(mod3)

# Remove HarvestTemp
mod4 <- lm(LogAuctionIndex ~ WinterRain + HarvestRain + GrowTemp + Age, 
           data = elantra.train)
summary(mod4)
vif(mod4)


# Categorical Variables
elantra.new <- read.csv("elantra_disagg.csv")
elantra.new.train <- filter(elantra.new, Year <= 1985)
elantra.new.test <- filter(elantra.new, Year > 1985)

str(elantra.new)
head(elantra.new)

# Regression use new data
modOld <- lm(LogAuction ~ WinterRain + HarvestRain + GrowTemp + Age, 
             data = elantra.new.train)
summary(modOld)


# Plot data
# ggplot(), geom_line() are from package "ggplot2"
# see http://ggplot2.org for reference 
# ggplot(data, aes(x = x_data, y = y_data))
# +geom_line() make line plots
# +geom_point() make point plots
# xlab(labelx),ylab(labely) axis label
# ggtitle(title)

ggplot(elantra.new, aes(x=Year, y=LogAuction, color=elantrary)) + geom_line() +
  xlab("Vintage Year") + ylab("log(2015 Auction Price)")

# Your turn: plot same data, make point plot,  name the axis and title.
ggplot(elantra.new, aes(x=Year, y=LogAuction, color=elantrary)) + geom_point() +
  xlab("Vintage Year") + ylab("log(2015 Auction Price)")+ggtitle("MyTitle")


# Two elantraries
elantra.two <- filter(elantra.new, elantrary == "Cheval Blanc" |elantrary == "Cos d'Estournel")
ggplot(elantra.two, aes(x=Year, y=LogAuction, color=elantrary)) + geom_line() +
  xlab("Vintage Year") + ylab("log(2015 Auction Price)")

elantra.two.train <- filter(elantra.two, Year <= 1985)
elantra.two.test <- filter(elantra.two, Year > 1985)
head(elantra.two.train)
tail(elantra.two.train)
modTwo <- lm(LogAuction ~ elantrary+WinterRain + HarvestRain + GrowTemp + Age, 
             data = elantra.two.train)
summary(modTwo)

# To use a factor/categorical variable like elantrary, 
# we don't actually have to do anything special 
# We can just provide it to lm, and R will handle all
# the logistics
modNew <- lm(LogAuction ~ elantrary + Age + WinterRain + HarvestRain + GrowTemp, 
             data=elantra.new.train)
summary(modNew)

# compute OSR^2
elantraNewPredictions <- predict(modNew, newdata=elantra.new.test)
SSE = sum((elantra.new.test$LogAuction - elantraNewPredictions)^2)
SST = sum((elantra.new.test$LogAuction - mean(elantra.new.train$LogAuction))^2)
OSR2 = 1 - SSE/SST

